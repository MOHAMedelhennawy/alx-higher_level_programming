The "2-matrix_divided" module
============================

Using "matrix_divided"
----------------------------

First import "matrix_divided" from the "2-matrix_divided" module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Define test cases using doctest format
Checking for module docstring:
    >>> m = __import__('2-matrix_divided').__doc__
    >>> len(m) > 1
    True

Checking for regular matrix_divided:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Checking for matrix with one column:
    >>> matrix = [[1, 2, 3]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0]]

Checking for matrix with multible columns:
    >>> matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0, 1.33], [1.67, 2.0, 2.33, 2.67], [3.0, 3.33, 3.67, 4.0]]
 
Checking for list of char and string:
    >>> matrix = [[1, '2', 3], [4, "hello", 6]]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Checking for more rows:
    >>> matrix = [[1, 5, 3, 3], [4, 3, 6]]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

Checking for division by char, string or list:
#Char
    >>> matrix = [[1, 5, 3], [4, 3, 6]]
    >>> matrix_divided(matrix, 'a')
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

#String
    >>> matrix = [[1, 5, 3], [4, 3, 6]]
    >>> matrix_divided(matrix, "Hello")
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

#List
    >>> matrix = [[1, 5, 3], [4, 3, 6]]
    >>> matrix_divided(matrix, [4, 2, 1])
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

Checking for division by zero:
    >>> matrix = [[1, 5, 3], [4, 3, 6]]
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

Checking for passing empty matrix:
    >>> matrix = []
    >>> matrix_divided(matrix, 3)
    []

Checking for unpassing div:
    >>> matrix = []
    >>> matrix_divided(matrix)
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

Checking for passing empty list:
    >>> matrix = [[]]
    >>> matrix_divided(matrix, 3)
    [[]]

Checking for unpassing div:
    >>> matrix = []
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

Checking for passing dictoanry:
    >>> matrix = {}
    >>> matrix_divided(matrix, 4)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Checking for passing dictoanry:
    >>> matrix = [[1, 5, 3], (4, 3, 6)]
    >>> matrix_divided(matrix, 4)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Checking for passing dictoanry:
    >>> matrix = None
    >>> matrix_divided(matrix, 4)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats


Checking for passing float matrix:
    >>> matrix = [[1.4, 3 , 2.5], [3.4, 8.2, 5]]
    >>> matrix_divided(matrix, 2)
    [[0.7, 1.5, 1.25], [1.7, 4.1, 2.5]]

Checking for division by float number:
    >>> matrix = [[1, 5, 3], [4, 3, 6]]
    >>> matrix_divided(matrix, 0.5)
    [[2.0, 10.0, 6.0], [8.0, 6.0, 12.0]]