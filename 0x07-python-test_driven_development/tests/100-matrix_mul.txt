The "100-matrix_mul" module

===============================

Using "matrix_mul"
-------------------------------

First import "matrix_mul" from "100-matrix_mul" module:
    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul


Checking for multiply two matrix:
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]

    >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    [[13, 16]]

Checking for passing tuples:
    >>> matrix_mul(((1, 2), (3, 4)), [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list

    >>> matrix_mul([[1, 2], [3, 4]] ,([1, 2], [3, 4]))
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list

Checking for passing integers:
    >>> matrix_mul(1, [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list

    >>> matrix_mul([[1, 2], [3, 4]], 3)
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list

Checking for passing a list of integer:
    >>> matrix_mul([3, 2, 3], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list of lists

Checking for passing a list of integer:
    >>> matrix_mul([[1, 2], [3, 4]], [3, 2, 3])
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list of lists

Checking for passing empty list:
    >>> matrix_mul([], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    ValueError: m_a can't be empty

    >>> matrix_mul([[1, 2], [3, 4]], [])
    Traceback (most recent call last):
        ...
    ValueError: m_b can't be empty

    >>> matrix_mul([[]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    ValueError: m_a can't be empty

    >>> matrix_mul([[1, 2], [3, 4]], [[]])
    Traceback (most recent call last):
        ...
    ValueError: m_b can't be empty

Checking for passing string and bool:
    >>> matrix_mul([[1, "2"], [3, 4]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], ["3", 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_b should contain only integers or floats

    >>> matrix_mul([[1, "string"], [True, 4]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_mul([[1, 2], [3, 4]], [["string", 2], [False, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_b should contain only integers or floats

Checking for passing different row size:
    >> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_a must should be of the same size
    
    >>> m_a = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> matrix_mul(m_a, m_b)
    Traceback (most recent call last):
        ...
    TypeError: each row of m_b must be of the same size